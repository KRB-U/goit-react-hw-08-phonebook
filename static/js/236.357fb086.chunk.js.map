{"version":3,"file":"static/js/236.357fb086.chunk.js","mappings":"uTAgBaA,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MAiCjB,OACE,SAAC,IAAD,CAAMC,GAAG,WAAWC,MAAM,SAASC,QAAQ,SAASC,EAAE,QAAtD,UACE,SAAC,KAAD,CAAKH,GAAG,QAAQI,EAAG,EAAGC,QAAQ,KAAKC,EAAG,GAAtC,UACE,SAAC,KAAD,CACEC,cAAe,CACbC,KAAM,GACNC,MAAO,GACPC,SAAU,IAEZC,SAAU,SAAAC,GACRd,GAASe,EAAAA,EAAAA,IAASD,IACfE,SACAC,MAAK,WACJC,EAAAA,GAAAA,QAAc,iCACf,IACAC,OAAM,kBAAMD,EAAAA,GAAAA,MAAY,iEAAlB,GACV,EAbH,SAeG,gBAAGE,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,QAAzB,OACC,iBAAMT,SAAUO,EAAhB,UACE,UAAC,IAAD,CAAQG,QAAS,EAAGpB,MAAM,aAA1B,WACE,UAAC,KAAD,YACE,SAAC,IAAD,CAAWqB,QAAQ,OAAnB,SAA0B,UAC1B,SAAC,KAAD,CACEC,GAAIC,EAAAA,EACJC,GAAG,OACHjB,KAAK,OACLkB,KAAK,OACLC,QAAQ,eAIZ,UAAC,KAAD,YACE,SAAC,IAAD,CAAWL,QAAQ,QAAnB,SAA2B,mBAC3B,SAAC,KAAD,CACEC,GAAIC,EAAAA,EACJC,GAAG,QACHjB,KAAK,QACLkB,KAAK,QACLC,QAAQ,eAGZ,UAAC,KAAD,CAAaC,YAAaT,EAAOT,UAAYU,EAAQV,SAArD,WACE,SAAC,IAAD,CAAWY,QAAQ,WAAnB,SAA8B,cAC9B,SAAC,KAAD,CACEC,GAAIC,EAAAA,EACJC,GAAG,WACHjB,KAAK,WACLkB,KAAK,WACLC,QAAQ,SACRE,SAAU,SAAAC,GACR,IAAIC,EAMJ,OAJID,EAAME,OAAS,IACjBD,EAAQ,+CAGHA,CACR,KAEH,SAAC,KAAD,UAAmBZ,EAAOT,eAE5B,SAAC,IAAD,CAAQgB,KAAK,SAASO,YAAY,SAASC,MAAM,OAAjD,SAAwD,iBA5C7D,OAsDV,E,UCvHc,SAASC,IACtB,OACE,0BACE,SAAC,IAAD,WACE,SAACtC,EAAD,OAIP,C","sources":["components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import { register } from 'components/redux/auth/operations';\nimport { useDispatch } from 'react-redux';\n\nimport { Formik, Field } from 'formik';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\nimport toast from 'react-hot-toast';\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  // const handleSubmit = e => {\n  //   e.preventDefault();\n  //   const form = e.currentTarget;\n  //   dispatch(\n  //     register({\n  //       name: form.elements.name.value,\n  //       email: form.elements.email.value,\n  //       password: form.elements.password.value,\n  //     })\n  //   );\n  //   form.reset();\n  // };\n\n  // return (\n  //   <form onSubmit={handleSubmit} autoComplete=\"off\">\n  //     <label>\n  //       Username\n  //       <input type=\"text\" name=\"name\" />\n  //     </label>\n  //     <label>\n  //       Email\n  //       <input type=\"email\" name=\"email\" />\n  //     </label>\n  //     <label>\n  //       Password\n  //       <input type=\"password\" name=\"password\" />\n  //     </label>\n  //     <button type=\"submit\">Register</button>\n  //   </form>\n  // );\n\n  return (\n    <Flex bg=\"gray.100\" align=\"center\" justify=\"center\" h=\"100vh\">\n      <Box bg=\"white\" p={6} rounded=\"md\" w={64}>\n        <Formik\n          initialValues={{\n            name: '',\n            email: '',\n            password: '',\n          }}\n          onSubmit={values => {\n            dispatch(register(values))\n              .unwrap()\n              .then(() => {\n                toast.success('успіх');\n              })\n              .catch(() => toast.error('такий юзер є'));\n          }}\n        >\n          {({ handleSubmit, errors, touched }) => (\n            <form onSubmit={handleSubmit}>\n              <VStack spacing={4} align=\"flex-start\">\n                <FormControl>\n                  <FormLabel htmlFor=\"name\">Name</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"name\"\n                    name=\"name\"\n                    type=\"text\"\n                    variant=\"filled\"\n                  />\n                </FormControl>\n\n                <FormControl>\n                  <FormLabel htmlFor=\"email\">Email Address</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"email\"\n                    variant=\"filled\"\n                  />\n                </FormControl>\n                <FormControl isInvalid={!!errors.password && touched.password}>\n                  <FormLabel htmlFor=\"password\">Password</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"password\"\n                    name=\"password\"\n                    type=\"password\"\n                    variant=\"filled\"\n                    validate={value => {\n                      let error;\n\n                      if (value.length < 6) {\n                        error = 'Password must contain at least 6 characters';\n                      }\n\n                      return error;\n                    }}\n                  />\n                  <FormErrorMessage>{errors.password}</FormErrorMessage>\n                </FormControl>\n                <Button type=\"submit\" colorScheme=\"purple\" width=\"full\">\n                  Register\n                </Button>\n              </VStack>\n            </form>\n          )}\n        </Formik>\n      </Box>\n    </Flex>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { ChakraProvider } from '@chakra-ui/react';\n\nexport default function Register() {\n  return (\n    <div>\n      <ChakraProvider>\n        <RegisterForm />\n      </ChakraProvider>\n    </div>\n  );\n}\n"],"names":["RegisterForm","dispatch","useDispatch","bg","align","justify","h","p","rounded","w","initialValues","name","email","password","onSubmit","values","register","unwrap","then","toast","catch","handleSubmit","errors","touched","spacing","htmlFor","as","Input","id","type","variant","isInvalid","validate","value","error","length","colorScheme","width","Register"],"sourceRoot":""}